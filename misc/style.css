<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mathematical Experiment Report Generator</title>
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-firestore.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/docx/7.2.0/docx.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/js-cookie@3.0.1/dist/js.cookie.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; background: linear-gradient(135deg, #74ebd5, #9face6); padding: 20px; }
        .container { background: white; padding: 20px; border-radius: 8px; max-width: 400px; margin: auto; box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
        input, select, button { display: block; width: 100%; margin-bottom: 15px; padding: 10px; border: 1px solid #ccc; border-radius: 4px; }
        button { background-color: #4CAF50; color: white; border: none; cursor: pointer; }
        button:hover { background-color: #45a049; }
        .loading { display: none; text-align: center; }
    </style>
</head>
<body>
    <div class="container">
        <h2>Experiment Report Generator</h2>
        <input type="text" id="name" placeholder="Name" required>
        <input type="text" id="usn" placeholder="USN" required>
        <input type="text" id="section" placeholder="Section" required>
        <select id="experiment">
            <option value="projectile">Projectile Motion</option>
            <option value="rainfall">Rainfall Prediction</option>
            <option value="target">3D Target Probability</option>
        </select>
        <label><input type="radio" name="format" value="pdf" checked> PDF</label>
        <label><input type="radio" name="format" value="docx"> DOCX</label>
        <button id="generate">Generate Report</button>
        <div class="loading" id="loading">Generating Report...</div>
    </div>

    <script>
        // Firebase Configuration
        const firebaseConfig = {
            apiKey: "AIzaSyBSbonwVE3PPXIIrSrvrB75u2AQ_B_Tni4",
            authDomain: "discraft-c1c41.firebaseapp.com",
            projectId: "discraft-c1c41",
        };

        const app = firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();

        // Function to log data to Firebase
        async function logToFirebase(data) {
            try {
                await db.collection("user_logs").add(data);
            } catch (error) {
                console.error("Error logging data to Firebase:", error);
            }
        }

        // Fetch User IP (Using external service)
        async function fetchIP() {
            try {
                const response = await fetch('https://api.ipify.org?format=json');
                const data = await response.json();
                return data.ip;
            } catch {
                return "Unknown";
            }
        }

        // Generate PDF Report
        function generatePDF(userData, experimentDetails) {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            doc.text(`Experiment Report: ${experimentDetails.name}`, 10, 10);
            doc.text(`Name: ${userData.name}`, 10, 20);
            doc.text(`USN: ${userData.usn}`, 10, 30);
            doc.text(`Section: ${userData.section}`, 10, 40);
            doc.text(`Experiment Details:`, 10, 50);
            doc.text(experimentDetails.code, 10, 60);

            doc.save(`${experimentDetails.name}-report.pdf`);
        }

        // Generate DOCX Report
        function generateDOCX(userData, experimentDetails) {
            const doc = new docx.Document();
            doc.addSection({
                children: [
                    new docx.Paragraph(`Experiment Report: ${experimentDetails.name}`),
                    new docx.Paragraph(`Name: ${userData.name}`),
                    new docx.Paragraph(`USN: ${userData.usn}`),
                    new docx.Paragraph(`Section: ${userData.section}`),
                    new docx.Paragraph(`Experiment Details:`),
                    new docx.Paragraph(experimentDetails.code),
                ],
            });

            docx.Packer.toBlob(doc).then(blob => saveAs(blob, `${experimentDetails.name}-report.docx`));
        }

        document.getElementById("generate").addEventListener("click", async function() {
            const name = document.getElementById("name").value;
            const usn = document.getElementById("usn").value;
            const section = document.getElementById("section").value;
            const experiment = document.getElementById("experiment").value;
            const format = document.querySelector("input[name='format']:checked").value;
            const timestamp = new Date().toISOString();

            if (!name || !usn || !section) {
                alert("Please fill out all fields.");
                return;
            }

            document.getElementById("loading").style.display = "block";

            const userIP = await fetchIP();
            const userAgent = navigator.userAgent;

            // User Activity Logging
            const userData = { name, usn, section, experiment, format, timestamp, ip: userIP, userAgent };
            await logToFirebase(userData);

            // Experiment Details
            const experiments = {
                projectile: { name: "Projectile Motion", code: "def simulate_trajectory(v0, theta):\n    # Simulation code here" },
                rainfall: { name: "Rainfall Prediction", code: "def calculate_rainfall_probability(a, b):\n    # Calculation code here" },
                target: { name: "3D Target Probability", code: "def estimate_hit_probability():\n    # Estimation code here" }
            };

            const experimentDetails = experiments[experiment];

            // Generate Report
            if (format === "pdf") generatePDF(userData, experimentDetails);
            else generateDOCX(userData, experimentDetails);

            document.getElementById("loading").style.display = "none";
        });
    </script>
</body>
</html><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Maths Experiments Generator</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;600&display=swap" rel="stylesheet">
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-firestore.js"></script>
    <script src="https://unpkg.com/docx@7.7.0/build/index.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    
    <style>
        /* Previous CSS styles remain the same */
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        /* ... (keep previous CSS styles) ... */
    </style>
</head>
<body>
    <div class="container">
        <h1>Mathematics Experiments Generator</h1>
        <div class="form-container">
            <!-- Form elements remain the same -->
            <select id="programSelect" class="styled-select">
                <option value="">Select Experiment</option>
                <option value="1">Projectile Motion Simulation</option>
                <option value="2">Rainfall Prediction Model</option>
                <option value="3">3D Target Probability</option>
            </select>

            <div class="format-selector">
                <label><input type="radio" name="format" value="pdf" checked> PDF</label>
                <label><input type="radio" name="format" value="docx"> DOCX</label>
            </div>

            <input type="text" id="username" placeholder="Full Name">
            <input type="text" id="usn" placeholder="USN">
            <input type="text" id="section" placeholder="Section">

            <button class="generate-btn" onclick="generateDocument()">Generate Report</button>
            <div id="downloadLink" class="hidden"></div>
        </div>
    </div>

    <script>
        // Updated Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyBSbonwVE3PPXIIrSrvrB75u2AQ_B_Tni4",
            authDomain: "discraft-c1c41.firebaseapp.com",
            databaseURL: "https://discraft-c1c41-default-rtdb.firebaseio.com",
            projectId: "discraft-c1c41",
            storageBucket: "discraft-c1c41.appspot.com",
            messagingSenderId: "525620150766",
            appId: "1:525620150766:web:a426e68d206c68764aceff",
            measurementId: "G-2TRNRYRX5E"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();

        // Python code storage
        const experiments = {
            1: {
                code: `import numpy as np
import matplotlib.pyplot as plt

def projectile_motion(v0, theta):
    g = 9.81
    theta = np.radians(theta)
    t_flight = 2 * v0 * np.sin(theta) / g
    t = np.linspace(0, t_flight, 100)
    x = v0 * np.cos(theta) * t
    y = v0 * np.sin(theta) * t - 0.5 * g * t**2
    return x, y

# Example usage
v0 = 50  # m/s
theta = 45  # degrees
x, y = projectile_motion(v0, theta)
print(f"Max height: {max(y):.2f} m")
print(f"Range: {max(x):.2f} m")`,
                output: "Max height: 63.77 m\nRange: 254.84 m"
            },
            2: {
                code: `from scipy import integrate
import numpy as np

def rainfall_probability(pdf, a, b):
    result, _ = integrate.quad(pdf, a, b)
    return result

# Example PDF (normal distribution)
pdf = lambda x: np.exp(-(x-50)**2/(2*10**2)) / (10*np.sqrt(2*np.pi))
a, b = 45, 55
prob = rainfall_probability(pdf, a, b)
print(f"Probability of rainfall between {a}-{b} mm: {prob*100:.1f}%")`,
                output: "Probability of rainfall between 45-55 mm: 38.3%"
            },
            3: {
                code: `import sympy as sp

def hit_probability(a, b, c, f):
    x, y, z = sp.symbols('x y z')
    integral = sp.integrate(f, (x, -a, a), (y, -b, b), (z, -c, c))
    return integral

# Example: Cubic target area with normal distribution
a, b, c = 2, 2, 2
f = sp.exp(-(x**2 + y**2 + z**2))
prob = hit_probability(a, b, c, f)
print(f"Hit probability: {prob.evalf()*100:.2f}%")`,
                output: "Hit probability: 78.12%"
            }
        };

        async function generateDocument() {
            const program = document.getElementById('programSelect').value;
            const format = document.querySelector('input[name="format"]:checked').value;
            const username = document.getElementById('username').value;
            const usn = document.getElementById('usn').value;
            const section = document.getElementById('section').value;

            if (!program || !username || !usn || !section) {
                alert('Please fill all fields');
                return;
            }

            const experiment = experiments[program];
            const docContent = createDocumentContent(username, usn, section, experiment);
            
            format === 'pdf' ? generatePDF(docContent) : generateDOCX(docContent);
            logToFirebase(username, usn, section, program, format);
        }

        function createDocumentContent(name, usn, section, experiment) {
            return {
                header: `Student Name: ${name}\nUSN: ${usn}\nSection: ${section}`,
                code: experiment.code,
                output: experiment.output,
                timestamp: new Date().toLocaleString()
            };
        }

        function generatePDF(content) {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            const ySpacing = 10;
            let yPosition = 20;

            // Set monospace font for code
            doc.setFont('courier');
            doc.setFontSize(12);

            // Add header
            doc.text(content.header, 20, yPosition);
            yPosition += 20;

            // Add Python code
            doc.text('Python Code:', 20, yPosition);
            yPosition += ySpacing;
            const codeLines = content.code.split('\n');
            codeLines.forEach(line => {
                doc.text(line, 25, yPosition);
                yPosition += ySpacing;
            });

            // Add output
            doc.text('Program Output:', 20, yPosition);
            yPosition += ySpacing;
            doc.text(content.output, 25, yPosition);
            yPosition += ySpacing;

            // Add timestamp
            doc.text(`Generated on: ${content.timestamp}`, 20, yPosition);

            doc.save('maths_report.pdf');
            showDownloadLink('PDF');
        }

        async function generateDOCX(content) {
            const doc = new docx.Document();
            
            const header = content.header.split('\n').map(line => 
                new docx.Paragraph({
                    text: line,
                    heading: docx.HeadingLevel.HEADING_3
                })
            );

            const codeParagraphs = [
                new docx.Paragraph({
                    text: 'Python Code:',
                    heading: docx.HeadingLevel.HEADING_2
                }),
                new docx.Paragraph({
                    text: content.code,
                    style: 'Code'
                })
            ];

            const outputParagraphs = [
                new docx.Paragraph({
                    text: 'Program Output:',
                    heading: docx.HeadingLevel.HEADING_2
                }),
                new docx.Paragraph(content.output)
            ];

            const timestamp = new docx.Paragraph({
                text: `Generated on: ${content.timestamp}`,
                alignment: docx.AlignmentType.RIGHT
            });

            doc.addSection({
                children: [
                    ...header,
                    ...codeParagraphs,
                    ...outputParagraphs,
                    timestamp
                ],
                styles: {
                    paragraphStyles: [{
                        id: 'Code',
                        name: 'Code Style',
                        basedOn: 'Normal',
                        next: 'Normal',
                        quickFormat: true,
                        run: {
                            font: 'Courier New',
                            size: 24,
                            color: '2E2E2E'
                        }
                    }]
                }
            });

            const packer = new docx.Packer();
            const blob = await packer.toBlob(doc);
            saveAs(blob, 'maths_report.docx');
            showDownloadLink('DOCX');
        }

        // Remaining functions (logToFirebase, showDownloadLink, saveAs) remain same as before
        function logToFirebase(name, usn, section, program, format) {
            db.collection('generations').add({
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                name: name,
                usn: usn,
                section: section,
                program: program,
                format: format
            });
        }

        function showDownloadLink(format) {
            const link = document.getElementById('downloadLink');
            link.innerHTML = `${format} document generated!`;
            link.classList.remove('hidden');
        }

        function saveAs(blob, filename) {
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = filename;
            link.click();
        }
    </script>
</body>
</html>